--
-- Failure tests for COPY to hash distributed tables
--
CREATE SCHEMA copy_distributed_table;
SET search_path TO 'copy_distributed_table';
SELECT citus.mitmproxy('conn.allow()');
 mitmproxy 
-----------
 
(1 row)

-- With one placement COPY should error out and placement should stay healthy.
SET citus.shard_replication_factor TO 1;
SET citus.shard_count to 4;
CREATE TABLE test_table(id int, value_1 int);
SELECT create_distributed_table('test_table','id');
 create_distributed_table 
--------------------------
 
(1 row)

CREATE VIEW unhealthy_shard_count AS 
	SELECT count(*) 
	FROM pg_dist_shard_placement pdsp 
	JOIN 
	pg_dist_shard pds 
	ON pdsp.shardid=pds.shardid 
	WHERE logicalrelid='copy_distributed_table.test_table'::regclass AND shardstate != 1;
-- Just kill the connection after getting the first response back
-- from the worker.
SELECT citus.mitmproxy('conn.kill()');
 mitmproxy 
-----------
 
(1 row)

\COPY test_table FROM stdin delimiter ',';
WARNING:  connection error: localhost:57640
DETAIL:  server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
CONTEXT:  COPY test_table, line 2: "3,4"
ERROR:  could not connect to any active placements
CONTEXT:  COPY test_table, line 2: "3,4"
SELECT citus.mitmproxy('conn.allow()');
 mitmproxy 
-----------
 
(1 row)

SELECT * FROM unhealthy_shard_count;
 count 
-------
     0
(1 row)

SELECT count(*) FROM test_table;
 count 
-------
     0
(1 row)

-- Now, kill the connection while copying the data
SELECT citus.mitmproxy('conn.onCopyData().kill()');
 mitmproxy 
-----------
 
(1 row)

\COPY test_table FROM stdin delimiter ',';
ERROR:  failed to COPY to shard 102009 on localhost:57640
SELECT citus.mitmproxy('conn.allow()');
 mitmproxy 
-----------
 
(1 row)

SELECT * FROM unhealthy_shard_count;
 count 
-------
     0
(1 row)

SELECT count(*) FROM test_table;
 count 
-------
     0
(1 row)

-- Similar to the above one, but now cancel the connection
-- instead of killing it.
SELECT citus.mitmproxy('conn.onCopyData().cancel(' ||  pg_backend_pid() || ')');
 mitmproxy 
-----------
 
(1 row)

\COPY test_table FROM stdin delimiter ',';
ERROR:  canceling statement due to user request
SELECT citus.mitmproxy('conn.allow()');
 mitmproxy 
-----------
 
(1 row)

SELECT * FROM unhealthy_shard_count;
 count 
-------
     0
(1 row)

SELECT count(*) FROM test_table;
 count 
-------
     0
(1 row)

-- kill the connection after worker sends command complete message
SELECT citus.mitmproxy('conn.onCommandComplete(command="COPY 1").kill()');
 mitmproxy 
-----------
 
(1 row)

\COPY test_table FROM stdin delimiter ',';
ERROR:  failed to COPY to shard 102009 on localhost:57640
SELECT citus.mitmproxy('conn.allow()');
 mitmproxy 
-----------
 
(1 row)

SELECT * FROM unhealthy_shard_count;
 count 
-------
     0
(1 row)

SELECT count(*) FROM test_table;
 count 
-------
     0
(1 row)

-- similar to above one, but cancel the connection on command complete
SELECT citus.mitmproxy('conn.onCommandComplete(command="COPY 1").cancel(' || pg_backend_pid() || ')');
 mitmproxy 
-----------
 
(1 row)

\COPY test_table FROM stdin delimiter ',';
ERROR:  canceling statement due to user request
SELECT citus.mitmproxy('conn.allow()');
 mitmproxy 
-----------
 
(1 row)

SELECT * FROM unhealthy_shard_count;
 count 
-------
     0
(1 row)

SELECT count(*) FROM test_table;
 count 
-------
     0
(1 row)

-- kill the connection on PREPARE TRANSACTION
SELECT citus.mitmproxy('conn.onQuery(query="PREPARE TRANSACTION").kill()');
 mitmproxy 
-----------
 
(1 row)

\COPY test_table FROM stdin delimiter ',';
ERROR:  connection not open
CONTEXT:  while executing command on localhost:57640
SELECT citus.mitmproxy('conn.allow()');
 mitmproxy 
-----------
 
(1 row)

SELECT * FROM unhealthy_shard_count;
 count 
-------
     0
(1 row)

SELECT count(*) FROM test_table;
 count 
-------
     0
(1 row)

-- we don't want to see the prepared transaction numbers in the warnings
SET client_min_messages TO ERROR;
-- kill on command complete on COMMIT PREPARE, command should succeed
SELECT citus.mitmproxy('conn.onCommandComplete(command="COMMIT PREPARED").kill()');
 mitmproxy 
-----------
 
(1 row)

\COPY test_table FROM stdin delimiter ',';
SET client_min_messages TO NOTICE;
SELECT citus.mitmproxy('conn.allow()');
 mitmproxy 
-----------
 
(1 row)

SELECT * FROM unhealthy_shard_count;
 count 
-------
     0
(1 row)

SELECT count(*) FROM test_table;
 count 
-------
     4
(1 row)

TRUNCATE TABLE test_table;
-- kill on ROLLBACK, command could be rollbacked
SELECT citus.mitmproxy('conn.onQuery(query="ROLLBACK").kill()');
 mitmproxy 
-----------
 
(1 row)

BEGIN;
\COPY test_table FROM stdin delimiter ',';
ROLLBACK;
WARNING:  connection not open
CONTEXT:  while executing command on localhost:57640
SELECT citus.mitmproxy('conn.allow()');
 mitmproxy 
-----------
 
(1 row)

SELECT * FROM unhealthy_shard_count;
 count 
-------
     0
(1 row)

SELECT count(*) FROM test_table;
 count 
-------
     0
(1 row)

-- With two placement, should we error out or mark untouched shard placements as inactive?
SET citus.shard_replication_factor TO 2;
CREATE TABLE test_table_2(id int, value_1 int);
SELECT create_distributed_table('test_table_2','id');
 create_distributed_table 
--------------------------
 
(1 row)

SELECT citus.mitmproxy('conn.kill()');
 mitmproxy 
-----------
 
(1 row)

\COPY test_table_2 FROM stdin delimiter ',';
WARNING:  connection error: localhost:57640
DETAIL:  server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
CONTEXT:  COPY test_table_2, line 1: "1,2"
WARNING:  connection error: localhost:57640
DETAIL:  server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
CONTEXT:  COPY test_table_2, line 2: "3,4"
WARNING:  connection error: localhost:57640
DETAIL:  server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
CONTEXT:  COPY test_table_2, line 3: "6,7"
SELECT citus.mitmproxy('conn.allow()');
 mitmproxy 
-----------
 
(1 row)

SELECT * FROM pg_dist_shard_placement;
 shardid | shardstate | shardlength | nodename  | nodeport | placementid 
---------+------------+-------------+-----------+----------+-------------
  102008 |          1 |           0 | localhost |    57637 |           1
  102010 |          1 |           0 | localhost |    57637 |           3
  102012 |          1 |           0 | localhost |    57637 |           5
  102013 |          1 |           0 | localhost |    57637 |           8
  102014 |          1 |           0 | localhost |    57637 |           9
  102015 |          1 |           0 | localhost |    57637 |          12
  102009 |          1 |           0 | localhost |    57640 |           2
  102011 |          1 |           0 | localhost |    57640 |           4
  102012 |          3 |           0 | localhost |    57640 |           6
  102013 |          3 |           0 | localhost |    57640 |           7
  102014 |          3 |           0 | localhost |    57640 |          10
  102015 |          1 |           0 | localhost |    57640 |          11
(12 rows)

SELECT citus.mitmproxy('conn.onCopyData().kill()');
 mitmproxy 
-----------
 
(1 row)

\COPY test_table_2 FROM stdin delimiter ',';
ERROR:  failed to COPY to shard 102015 on localhost:57640
SELECT citus.mitmproxy('conn.allow()');
 mitmproxy 
-----------
 
(1 row)

SELECT * FROM pg_dist_shard_placement;
 shardid | shardstate | shardlength | nodename  | nodeport | placementid 
---------+------------+-------------+-----------+----------+-------------
  102008 |          1 |           0 | localhost |    57637 |           1
  102010 |          1 |           0 | localhost |    57637 |           3
  102012 |          1 |           0 | localhost |    57637 |           5
  102013 |          1 |           0 | localhost |    57637 |           8
  102014 |          1 |           0 | localhost |    57637 |           9
  102015 |          1 |           0 | localhost |    57637 |          12
  102009 |          1 |           0 | localhost |    57640 |           2
  102011 |          1 |           0 | localhost |    57640 |           4
  102012 |          3 |           0 | localhost |    57640 |           6
  102013 |          3 |           0 | localhost |    57640 |           7
  102014 |          3 |           0 | localhost |    57640 |          10
  102015 |          1 |           0 | localhost |    57640 |          11
(12 rows)

DROP SCHEMA copy_distributed_table CASCADE;
NOTICE:  drop cascades to 3 other objects
DETAIL:  drop cascades to table test_table
drop cascades to view unhealthy_shard_count
drop cascades to table test_table_2
SET search_path TO default;
