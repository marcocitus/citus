CREATE SCHEMA failure_create_table;
SET search_path TO 'failure_create_table';
SELECT citus.mitmproxy('conn.allow()');
 mitmproxy 
-----------
 
(1 row)

-- Create distributed table in 1PC and 2PC,
-- then check if the transaction can be rollbacked.
SET citus.shard_replication_factor TO 1;
SET citus.shard_count to 4;
CREATE TABLE test_table(id int, value_1 int);
-- Kill connection before sending query to the worker 
SELECT citus.mitmproxy('conn.kill()');
 mitmproxy 
-----------
 
(1 row)

SELECT create_distributed_table('test_table','id');
ERROR:  connection error: localhost:57640
DETAIL:  server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
SELECT count(*) FROM pg_dist_shard;
 count 
-------
     0
(1 row)

\c - - - :worker_1_port
SELECT count(*) FROM pg_class WHERE relname LIKE 'test_table%';
 count 
-------
     0
(1 row)

\c - - - :master_port
SET search_path TO 'failure_create_table';
SELECT citus.mitmproxy('conn.allow()');
 mitmproxy 
-----------
 
(1 row)

-- Now, kill the connection just after transaction is opened on
-- workers.
SELECT citus.mitmproxy('conn.onQuery(query="^BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED").kill()');
 mitmproxy 
-----------
 
(1 row)

SELECT create_distributed_table('test_table','id');
WARNING:  connection not open
CONTEXT:  while executing command on localhost:57640
ERROR:  connection error: localhost:57640
DETAIL:  connection not open
SELECT count(*) FROM pg_dist_shard;
 count 
-------
     0
(1 row)

\c - - - :worker_1_port
SELECT count(*) FROM pg_class WHERE relname LIKE 'test_table%';
 count 
-------
     0
(1 row)

\c - - - :master_port
SET search_path TO 'failure_create_table';
SELECT citus.mitmproxy('conn.allow()');
 mitmproxy 
-----------
 
(1 row)

-- Now, cancel the connection just after transaction is opened on
-- workers. Note that, cancel requests will be ignored during
-- shard creation.
SELECT citus.mitmproxy('conn.onQuery(query="^BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED").cancel(' || pg_backend_pid() || ')');
 mitmproxy 
-----------
 
(1 row)

SELECT create_distributed_table('test_table','id');
WARNING:  cancel requests are ignored during shard creation
 create_distributed_table 
--------------------------
 
(1 row)

SELECT count(*) FROM pg_dist_shard;
 count 
-------
     4
(1 row)

\c - - - :worker_1_port
SELECT count(*) FROM pg_class WHERE relname LIKE 'test_table%';
 count 
-------
     4
(1 row)

\c - - - :master_port
SET search_path TO 'failure_create_table';
SELECT citus.mitmproxy('conn.allow()');
 mitmproxy 
-----------
 
(1 row)

DROP TABLE test_table;
CREATE TABLE test_table(id int, value_1 int);
-- Kill the connection after worker sends "PREPARE TRANSACTION" ack
SELECT citus.mitmproxy('conn.onQuery(query="^PREPARE TRANSACTION").kill()');
 mitmproxy 
-----------
 
(1 row)

SELECT create_distributed_table('test_table','id');
ERROR:  connection not open
CONTEXT:  while executing command on localhost:57640
SELECT count(*) FROM pg_dist_shard;
 count 
-------
     0
(1 row)

\c - - - :worker_1_port
SELECT count(*) FROM pg_class WHERE relname LIKE 'test_table%';
 count 
-------
     0
(1 row)

\c - - - :master_port
SET search_path TO 'failure_create_table';
SELECT citus.mitmproxy('conn.allow()');
 mitmproxy 
-----------
 
(1 row)

SELECT citus.mitmproxy('conn.onQuery(query="PREPARE TRANSACTION").cancel(' ||  pg_backend_pid() || ')');
 mitmproxy 
-----------
 
(1 row)

SELECT create_distributed_table('test_table','id');
ERROR:  canceling statement due to user request
SELECT count(*) FROM pg_dist_shard;
 count 
-------
     0
(1 row)

\c - - - :worker_1_port
SELECT count(*) FROM pg_class WHERE relname LIKE 'test_table%';
 count 
-------
     0
(1 row)

\c - - - :master_port
SET search_path TO 'failure_create_table';
SELECT citus.mitmproxy('conn.allow()');
 mitmproxy 
-----------
 
(1 row)

-- Test inside transaction
-- Kill connection before sending query to the worker 
SELECT citus.mitmproxy('conn.kill()');
 mitmproxy 
-----------
 
(1 row)

BEGIN;
SELECT create_distributed_table('test_table','id');
ERROR:  connection error: localhost:57640
DETAIL:  server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
ROLLBACK;
SELECT count(*) FROM pg_dist_shard;
 count 
-------
     0
(1 row)

\c - - - :worker_1_port
SELECT count(*) FROM pg_class WHERE relname LIKE 'test_table%';
 count 
-------
     0
(1 row)

\c - - - :master_port
SET search_path TO 'failure_create_table';
SELECT citus.mitmproxy('conn.allow()');
 mitmproxy 
-----------
 
(1 row)

-- Now, kill the connection just after transaction is opened on
-- workers.
SELECT citus.mitmproxy('conn.onQuery(query="^BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED").kill()');
 mitmproxy 
-----------
 
(1 row)

BEGIN;
SELECT create_distributed_table('test_table','id');
WARNING:  connection not open
CONTEXT:  while executing command on localhost:57640
ERROR:  connection error: localhost:57640
DETAIL:  connection not open
ROLLBACK;
SELECT count(*) FROM pg_dist_shard;
 count 
-------
     0
(1 row)

\c - - - :worker_1_port
SELECT count(*) FROM pg_class WHERE relname LIKE 'test_table%';
 count 
-------
     0
(1 row)

\c - - - :master_port
SET search_path TO 'failure_create_table';
SELECT citus.mitmproxy('conn.allow()');
 mitmproxy 
-----------
 
(1 row)

-- Now, cancel the connection just after transaction is opened on
-- workers. Note that, cancel requests will be ignored during
-- shard creation.
SELECT citus.mitmproxy('conn.onQuery(query="^BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED").cancel(' || pg_backend_pid() || ')');
 mitmproxy 
-----------
 
(1 row)

BEGIN;
SELECT create_distributed_table('test_table','id');
WARNING:  cancel requests are ignored during shard creation
 create_distributed_table 
--------------------------
 
(1 row)

COMMIT;
SELECT count(*) FROM pg_dist_shard;
 count 
-------
     4
(1 row)

\c - - - :worker_1_port
SELECT count(*) FROM pg_class WHERE relname LIKE 'test_table%';
 count 
-------
     4
(1 row)

\c - - - :master_port
SET search_path TO 'failure_create_table';
SELECT citus.mitmproxy('conn.allow()');
 mitmproxy 
-----------
 
(1 row)

DROP TABLE test_table;
CREATE TABLE test_table(id int, value_1 int);
-- Test inside transaction and with 1PC
SET citus.multi_shard_commit_protocol TO "1pc";
-- Kill connection before sending query to the worker 
SELECT citus.mitmproxy('conn.kill()');
 mitmproxy 
-----------
 
(1 row)

BEGIN;
SELECT create_distributed_table('test_table','id');
ERROR:  connection error: localhost:57640
DETAIL:  server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
ROLLBACK;
SELECT count(*) FROM pg_dist_shard;
 count 
-------
     0
(1 row)

\c - - - :worker_1_port
SELECT count(*) FROM pg_class WHERE relname LIKE 'test_table%';
 count 
-------
     0
(1 row)

\c - - - :master_port
SET search_path TO 'failure_create_table';
SELECT citus.mitmproxy('conn.allow()');
 mitmproxy 
-----------
 
(1 row)

-- Now, kill the connection just after transaction is opened on
-- workers.
SELECT citus.mitmproxy('conn.onQuery(query="^BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED").kill()');
 mitmproxy 
-----------
 
(1 row)

BEGIN;
SELECT create_distributed_table('test_table','id');
WARNING:  connection not open
CONTEXT:  while executing command on localhost:57640
ERROR:  connection error: localhost:57640
DETAIL:  connection not open
ROLLBACK;
SELECT count(*) FROM pg_dist_shard;
 count 
-------
     0
(1 row)

\c - - - :worker_1_port
SELECT count(*) FROM pg_class WHERE relname LIKE 'test_table%';
 count 
-------
     0
(1 row)

\c - - - :master_port
SET search_path TO 'failure_create_table';
SELECT citus.mitmproxy('conn.allow()');
 mitmproxy 
-----------
 
(1 row)

-- Now, cancel the connection just after transaction is opened on
-- workers. Note that, cancel requests will be ignored during
-- shard creation.
SELECT citus.mitmproxy('conn.onQuery(query="^BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED").cancel(' || pg_backend_pid() || ')');
 mitmproxy 
-----------
 
(1 row)

BEGIN;
SELECT create_distributed_table('test_table','id');
WARNING:  cancel requests are ignored during shard creation
 create_distributed_table 
--------------------------
 
(1 row)

COMMIT;
SELECT count(*) FROM pg_dist_shard;
 count 
-------
     4
(1 row)

\c - - - :worker_1_port
SELECT count(*) FROM pg_class WHERE relname LIKE 'test_table%';
 count 
-------
     4
(1 row)

